#lang plai/gc2/mutator
(allocator-setup "gc.rkt" 200)
(define (build-one)
  (let* ((x0 -1)
         (x1 empty)
         (x2 (cons #f #f))
         (x3 (cons #f #f))
         (x4 (cons #f #f))
         (x5 (lambda (x) (if (= x 0) x3 (if (= x 1) x1 x0))))
         (x6 #t)
         (x7 #t))
    (set-first! x2 x5)
    (set-rest! x2 x3)
    (set-first! x3 x6)
    (set-rest! x3 x5)
    (set-first! x4 x5)
    (set-rest! x4 x4)
    x4))
(define (traverse-one x4)
  (empty? ((rest ((first (rest (rest (rest x4)))) 0)) 1)))
(define (trigger-gc n)
  (if (zero? n) 0 (begin (cons n n) (trigger-gc (- n 1)))))
(define (loop i)
  (if (zero? i)
    'passed
    (let ((obj (build-one)))
      (trigger-gc 200)
      (if (traverse-one obj) (loop (- i 1)) 'failed))))
(loop 200)
